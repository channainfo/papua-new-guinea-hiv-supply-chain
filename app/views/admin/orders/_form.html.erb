<style>
 .error-td .control-group, .error-td .control{
   width: 200px !important;
   display: inline-block;
 }
</style>
<%= simple_form_for [:admin, @order], :html => { :class => 'form-horizontal', :id => 'form_order' } do |f| %>
  <%= f.error_notification %>
  <div class='row'>
    <div class='span4' >
      <%= f.input :site_id, :collection => Site.all.map{|site| [site.name, site.id]},
                         :include_blank => 'Select a Site'
                         %>
    </div>

    <div class='span3'>
      <%= f.input :order_date, :as => 'date_time_picker', 
                               :label => 'Order Create' ,
                               :input_html => {:class => 'datepicker-fit'}

                               %>   
    </div>

    <div class='span3'>
        <%= f.input :date_submittion, :as => 'date_time_picker', 
                                      :label => 'Order Received',
                                      :input_html => { :class  => 'datepicker-fit'} 

                                      %> 
    </div>
    <div class='span2' style ='text-align:center;' >
      <%= button_save ' Save order'  %>
    </div>

  </div>

  <div id='order_lines_tab'>
      <%= render :partial => 'order_lines', :locals => {:f => f, :order => @order} %> 
  </div>

  <div class="form-actions">
    <%= button_save ' Save Order '  %>
    <%= link_button_cancel 'Cancel', admin_provinces_path  %>
  </div>
<% end %>

<script>
  var TYPES_DRUG = "<%= CommodityCategory::TYPES_DRUG %>";
  var TYPES_KIT = "<%= CommodityCategory::TYPES_KIT %>";

  function initUIPopover(){
    // $("[rel='popover']").popover(
    //   {trigger:'click',animation:'false', placement:'top' }
    // );
    var selector = ".order_popover";

    $(selector).popover({ html : true });

    $(selector).mouseover(function () {
      // $(selector).not(this).popover('hide');
      $(selector).popover('hide');
    });

  }

  function updateViewSystemSuggestion(){
    $(".stock_on_hand").on('keyup', function(){
      $elm = $(this);
      var ref =  $elm.attr('data-ref'); 
      var systemCalcId = "#quantity_system_calculation_" + ref
      $systemCal = $(systemCalcId);

      var consumtion = $("#consumption_per_client_per_month_" + ref ).val()
      var numberOfClient = $("#number_of_client_" + ref ).val()

      var value = parseFloat(consumtion) * parseFloat(numberOfClient) - parseFloat($elm.val())
      $systemCal.html(value);

    })
  }

  function loadOrderLinesTab(){
    $("#order_site_id").on('change', function(){
       _loadOrderLinesTab();
    });

    $("#order_order_date").on('change', function(){
       _loadOrderLinesTab();
    });
  }


  function _loadOrderLinesTab(){
    site_id = $("#order_site_id").val();
    date   = $("#order_order_date").val();
    order_id = '<%=@order.id%>';

    if(!site_id || !date)
      return ;
    showLoading();
    $.ajax({
        url    : '<%= tab_order_line_admin_orders_path()%>',
        data   : {'site_id' : site_id, 'order_date': date, 'id' : order_id, pp: 'disable'},
        method : 'GET',
        success: function(response){
          $('#order_lines_tab').html(response);
        },
        complete: function(){
          hideLoading();
        }
    });
  }

  function initEventValidateField(){
    $(document.body).delegate(".validate_field", 'keyup', function(){
        validateCriteria($(this));
    });
  }

  function getOrderLineObject($elm){
    console.log("init");
    var ref = $elm.attr("data-ref");
    //$datasets =  $("input[data-ref=" + ref + "]");

    var orderLine = {
          commodityName                       : $('#commodity_name_' + ref).val() ,
          commodityId                         : ref,
          arvType                             : $("#arv_type_" + ref ).val(),
          siteSuggestion                      : $("#site_suggestion_" + ref ).val(),
          testKitWasteAcceptable              : $("#test_kit_waste_acceptable_" + ref ).val(),
          numberOfClient                      : cleanInput($("#number_of_client_" + ref ).val()),
          consumtionPerClient                 : cleanInput($("#consumption_per_client_per_month_" + ref ).val()) ,
          stockOnHand                         : cleanInput($("#stock_on_hand_" + ref ).val()),
          monthlyUse                          : cleanInput($("#monthly_use_" + ref ).val()),
          quantitySuggested                   : cleanInput($("#quantity_suggested_" + ref ).val()),
          errors                              : [],


          errorMessage: function(type){
            var message = "" ;
            if(type == TYPES_DRUG )
              message = "<b>" + this.commodityName + "</b>: Quantity Suggested is not within " + filter(this.siteSuggestion) + " of population consumption";
            else
              message = "<b>" + this.commodityName + "</b>: Monthly use declared by site is greater than " + filter(this.testKitWasteAcceptable)  + " of acceptable wastage";
            return message;
          },

          hasError: function(){
            return this.errors.length ;
          },

          fullErrorMessages: function(){
             var errors = []
             for(var i=0; i< this.errors.length; i++){
                errors.push( this.errorMessage(this.errors[i]));
             }
             return errors;
          },

          systemSuggestion : function(){
            consumtion = parseFloat(this.numberOfClient) * parseFloat(this.consumtionPerClient)
            var systemSuggestion = consumtion - parseFloat(this.stockOnHand)
            return systemSuggestion;
          },

          calQuantitySuggested : function() {
             var systemSuggestion = this.systemSuggestion();
             var cal = 100 * Math.abs( this.quantitySuggested - systemSuggestion) / Math.max(this.quantitySuggested , systemSuggestion) ;
             return formatNumber(cal);
          },

          calQuantityWastage : function(){
            systemSuggestion = this.systemSuggestion();
            return formatNumber( 100 * (this.monthlyUse - systemSuggestion) / systemSuggestion )
          },

          validateQuantitySuggestedAcceptable: function(){
            if(this.allowBlank())
                return true ;

            if(this.calQuantitySuggested() > parseFloat(this.siteSuggestion)){
               this.errors.push(TYPES_DRUG)
               return false
            }
            return true;
          },

          validateWastageAcceptable: function(){
            if(this.allowBlank())
               return true;   

            if(this.calQuantityWastage() > parseFloat(this.testKitWasteAcceptable)){
              this.errors.push(TYPES_KIT)
              return false;
            }
            return true ;
          },

          allowBlank: function(){
             return (this.stockOnHand == "" || this.monthlyUse == "" || this.numberOfClient == "" || this.consumtionPerClient == "");
          }
    }
    return orderLine;
  }

  function  validateCriteria($elm){
    var object = getOrderLineObject($elm);
    if(object.arvType == TYPES_DRUG ){
        object.validateQuantitySuggestedAcceptable() ;
    }
    else{
       object.validateQuantitySuggestedAcceptable() ;
       console.log(object.errors); 
       object.validateWastageAcceptable();  
       console.log(object.errors);    
    }
    if(object.hasError()){
      var fullErrorMessages = object.fullErrorMessages();
      errorMessages = fullErrorMessages.join("<hr class='separator' />");
      showError(object.commodityId, errorMessages);
    }
    else{
      hideError(object.commodityId)
    }
  }

  function showError(ref, msg){
    var $el = $("#error_" + ref);
    $el.attr("data-content", msg );
    $el.show();
    $("#tr_" + ref + " td").addClass("row-error");
  }

  function hideError(ref){
    var $el = $("#error_" + ref);
    $el.hide();
    $el.popover('hide');
    $("#tr_" + ref + " td").removeClass("row-error");

  }

  function cleanInput(str){
    return $.trim(str);
  }
  function formatNumber(cal){
    return cal.toFixed(2);
  }

  function filter(number){
    return "<b>" + number + "% </b>" ;
  }

  $(function(){
    loadOrderLinesTab();
    initEventValidateField();

    updateViewSystemSuggestion();
    initUIPopover();
  });
</script>
